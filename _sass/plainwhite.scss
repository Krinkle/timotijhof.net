@import 'ext/solarized-light';

$fontFamilySans: -apple-system, BlinkMacSystemFont, Roboto, sans-serif;

$sidebarWidth: 220px;

$contentSpacing: 20px;
$contentSpacingMicro: 10px;

// "Micro" widths:
// - Nokia 8110 4G:     240px
$breakMicro: 319px; // max-width

// "Mobile" widths:
// - iPhone 5/SE:       320px (Portrait)
// - iPhone 6/7/8:      375px (Portrait)
// - iPhone 6/7/8 Plus: 414px (Portrait)
// - iPad: 768px (Portait)
$breakMobile: 770px; // max-width

// "Beyond mobile" widths:
// - iPad:              1024px (Landscape)
// - Generic Desktop:   771px-1000px (Custom)
$breakBeyondMobile: $breakMobile + 1px; // min-width

// "Wide" widths:
// - Generic Desktop:   1000px or wider (Custom)
$breakWide: 1000px; // min-width

html {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	// Prevent iOS text size adjust after orientation change, without disabling user zoom.
	-ms-text-size-adjust: 100%;
	-webkit-text-size-adjust: 100%;
}

html, button {
	font-family: $fontFamilySans;
	font-size: 16px;
	line-height: 1.2;
}

body {
	// Reset UA
	margin: 0;
}

h1 {
	font-size: 2.1em;
	margin: $contentSpacing 0;
	font-weight: 600;
	@media screen and (max-width: $breakMicro) {
		margin: $contentSpacingMicro 0;
	}
}
h2 {
	font-size: 1.5em;
	font-family: $fontFamilySans;
	font-weight: 600;
	margin: 0.7em 0 0.3em;
}
h3,
.md-toc > li {
	font-size: 1.17em;
	font-family: $fontFamilySans;
	font-weight: 600;
	margin: 0.7em 0 0;
}
.md-toc {
	font-style: italic;
}
ul.md-toc {
	list-style: none;
	padding-left: 1em;
}
ul.md-toc > li:before {
	content: '§ ';
}
p {
	margin: 1em 0;
}
h2 + p,
h3 + p {
	margin-top: 0;
}

blockquote {
	margin: 1em;
	border-left: 5px solid transparent;
	padding: 0.5em 1em;
	color: inherit;
	font-size: 0.8em;
}
blockquote > p:first-child {
	margin-top: 0;
}
blockquote > p:last-child {
	margin-bottom: 0;
}

hr {
	clear: both;
	border: 0;
	margin: 2em auto 1.5em;
	max-width: 80%;
	height: 1px;
}

// See also assets/css/style.scss
.icon {
  speak: none;
  display: inline-block;
  width: 1em;
  height: 1em;
  background-repeat: no-repeat;
  background-position: 50% 50%;
  background-size: contain;
  vertical-align: top;
}

@mixin screen-reader-text {
	clip: rect(1px, 1px, 1px, 1px);
	overflow: hidden;
	position: absolute !important;
	height: 1px;
	width: 1px;
}
.screen-reader-text {
	@include screen-reader-text;
}

pre.highlight {
	overflow: auto;
	padding: 1em 1em;
	font-family: Menlo, Monaco, monospace;
	line-height: 1.4;
	font-size: 17px;
	tab-size: 4;
	white-space: pre-wrap;
	white-space: break-spaces;
	overflow-wrap: break-word;
}
code.highlighter-rouge {
	padding: 0.3em 0.4em;
	font-family: Menlo, Monaco, monospace;
	font-size: 0.8em;
}

.wrap {
	margin: 0 auto;
	display: flex;
	height: 100%;
	max-width: $breakWide;

	@media screen and (max-width: $breakMobile) {
		flex-direction: column;
	}
}
.content {
	// Use border-box to make it easy to add padding
	// inside, within the given width/max-width.
	box-sizing: border-box;
	padding: 35px $contentSpacing;

	@media screen and (max-width: $breakMobile) {
		// Remove top padding
		padding: 0 $contentSpacing;
	}
	@media screen and (max-width: $breakMicro) {
		padding: 0 $contentSpacingMicro;
	}
	@media screen and (min-width: $breakBeyondMobile) {
		max-width: calc(100% - 220px);
	}
}

.about {
	display: flex;
	flex: 0;
	height: 90vh;
	width: $sidebarWidth;
	justify-content: flex-start;
	flex-direction: column;
	align-items: center;
	text-align: center;
	margin: 10vh auto 0 auto;
	// Ensure the About aligns with page header
	// where 35px = content padding-top
	$wideTop: 35px + $contentSpacing;
	margin: #{"min("$wideTop", 10vh)"} auto 0 auto;
	img {
		max-height: 150px;
	}
	h2 {
		font-size: 22px;
		margin: 25px 0 0 0;
		font-weight: normal;
	}
}
.tagline {
	font-size: 22px;
	margin: 18px 0;
}

.social {
	list-style-type: none;
	padding: 0;
	margin-top: 0;
	li {
		float: left;
	}
	a {
		margin: 0 .2em;
		display: inline-block;
		border-radius: 100%;
		font-size: 34px;
		line-height: 1;
	}
	.icon {
		opacity: 0.5;
	}
	a:hover .icon {
		opacity: 1;
	}
}
@media screen and (max-width: $breakMobile) {
	.about {
		height: auto;
		margin-top: 5vh;
	}
	.about-sm {
		justify-content: space-between;
		flex-direction: row;
		width: auto;
		margin: 0;
		padding: $contentSpacing;
		border-bottom: 1px solid transparent;
		.sitelink {
			display: flex;
			justify-content: flex-start;
			text-align: left; // For micro widths
			align-items: center;
		}
		img {
			max-width: 50px;
			max-height: 50px; // Support: KAIOS 2.5 / FF 48 (Fix aspect ratio)
		}
		h2 {
			margin: 0 0 0 $contentSpacing;
		}
		.tagline,
		.social,
		.footer {
			display: none;
		}
	}
}
@media screen and (max-width: $breakMicro) {
	.about {
		.sitelink {
			display: flex;
			justify-content: flex-start;
			text-align: left; // For micro widths
			align-items: center;
		}
		img {
			max-width: 50px;
			max-height: 50px; // Support: KAIOS 2.5 / FF 48 (Fix aspect ratio)
		}
		h2 {
			font-size: 18px;
			margin: 0 0 0 $contentSpacingMicro;
		}
		.footer {
			display: none;
		}
	}
	.tagline {
		font-size: 14px;
		margin: $contentSpacingMicro 0;
	}
	.social {
		a {
			font-size: 28px;
		}
	}

	.about-sm {
		padding: $contentSpacingMicro;
		h2 {
			margin: 0 0 0 $contentSpacingMicro;
		}
	}
}
@media screen and (min-width: $breakBeyondMobile) {
	.tagline {
		font-size: 18px;
		line-height: 1.6;
		margin: 1.2em 0;
	}
}

.dark-toggleable .dark-toggle {
	// margin-top=auto makes this item jusitied at the bottom
	// of the flex column (.about).
	margin: auto 0 10px 0;
	border: 0;
	border-radius: 2px;
	padding: 5px 20px 5px 10px;
	font-size: 14px;
	cursor: pointer;
	white-space: nowrap; // For micro widths
}
@media screen and (min-width: $breakBeyondMobile) {
	.dark-toggleable .dark-toggle {
		position: fixed;
		bottom: 0;
	}
}

.posts-label {
	border-bottom: 1px solid transparent;
	font-size: 15px;
	text-transform: uppercase;
	letter-spacing: 0.5px;
	padding-bottom: 10px;
	font-weight: normal;
}

a.sitelink,
.post-link,
.post-date a,
.post-tag,
.posts-label a {
	text-decoration: none;
}
// Link to post from listings (home page, tag page)
.posts-row .post-link:hover {
	text-decoration: underline;
}
.posts-row {
	border-bottom: 1px solid transparent;
	.post-date a {
		color: inherit;
	}
}

.post-meta {
	overflow: hidden;
	// Undo last non-collapsed post-tags margin-bottom
	margin-bottom: -10px;
}
.post-date .icon {
	// Approximate text color
	opacity: 0.7;
	margin-right: 0.3em;
}
.post-tag {
	display: inline-block;
	border-bottom: 1px solid transparent;
}
.post-title {
	margin: 0.7em 0;
	font-size: 28px;
}

.post {
	font-family: 'Georgia', sans-serif;
	font-weight: 400;
	font-size: 18px;
	line-height: 1.7;

	@media screen and (min-width: $breakWide) {
		font-size: 20px;
		letter-spacing: -0.1px;
	}

	@media screen and (max-width: $breakMobile) {
		font-size: 17px;
	}

	a {
		text-decoration: none;
		border-bottom: 0.5px solid transparent;
		// Avoid scrollbars on mobile due to longer urls
		word-break: break-word;
	}
	strong {
		letter-spacing: -0.3px;
		font-size: 90%;
	}
	a:hover {
		border-bottom: 3px solid transparent;
	}
	a > code {
		text-decoration: underline;
	}
	a:hover > code {
		background-color: transparent;
		text-decoration: none;
	}
	li {
		margin-top: 0.5em;
	}
	img {
		object-fit: scale-down;
		width: auto;
		height: auto;
		// Markup may have its own max-height or max-width,
		// which we'll honour. E.g. in combination with md-block-left.
		max-width: 100%;
		max-height: 100vh;
		@media screen and (max-width: $breakMobile) {
			// ... but, once we get to a certain narrow width,
			// honouring the inline style means it can end up
			// being bigger than the viewport and cause scrollbars.
			// This hack wouldn't be needed if CSS min()/clamp() had
			// wide browser support so that the inline markup
			// could use "max-width: min(380px, 100%)".
			max-width: 100% !important;
			max-height: 100vh !important;
		}
		@media screen and (min-width: $breakBeyondMobile) {
			cursor: zoom-in;
		}
	}
	// Turn simple images (those not in an already widened block),
	// effectively into a block as well.
	> p:not(.md-block) > img {
		max-width: calc( 100% + #{$contentSpacing} + #{$contentSpacing} );
		@media screen and (max-width: $breakMobile) {
			max-width: calc( 100% + #{$contentSpacing} + #{$contentSpacing} ) !important;
		}
		@media screen and (max-width: $breakMicro) {
			max-width: calc( 100% + #{$contentSpacingMicro} + #{$contentSpacingMicro} ) !important;
		}
	}
	a img {
		cursor: inherit;
	}
	figure,
	table,
	> p:not(.md-block) > img,
	.md-block,
	pre.highlight {
		margin-left: -$contentSpacing;
		margin-right: -$contentSpacing;
		@media screen and (max-width: $breakMicro) {
			margin-left: -$contentSpacingMicro;
			margin-right: -$contentSpacingMicro;
		}
	}
	figure > p {
		// No easy way in Kramdown to have <figcaption> and <img> in the
		// same box without the <img> getting a magic paragraph. This is
		// fine in un-floated contexts where the figure's margin and p's
		// margin collapse together. But when floated, they add up.
		margin: 0;
	}
	figcaption {
		font-family: $fontFamilySans;
		font-size: 15px;
		line-height: 1.5;
	}
}

.post {
	.md-dictdef {
		border-width: 5px;
		border-style: dashed;
		line-height: 1.1;
	}
	.md-box {
		outline: 2px solid transparent;
	}
	figure,
	.md-block {
		text-align: center;
	}
	table.md-block {
		border-spacing: 4px;
	}
	.md-block-right {
		text-align: center;
		@media screen and (min-width: $breakWide) {
			float: right;
			margin-top: 0;
			margin-bottom: 1em;
			margin-left: 0.75em;
		}
	}
	.md-block-left {
		text-align: center;
		@media screen and (min-width: $breakWide) {
			float: left;
			margin-top: 0;
			margin-bottom: 1em;
			margin-right: 0.75em;
		}
	}
	.md-right {
		clear: right;
		text-align: right;
	}
}
.posts-row {
	.md-dictdef {
		border-width: 0 0 0 5px;
		color: inherit;
	}
}

[data-tip] {
	position: relative;
}

// The cut-out
.tip-handle:focus + [data-tip]:before,
.tip-handle:active + [data-tip]:before {
	content: "";
	display: block;
	// Set z-index to get it in front of the tip's drop-shadow
	z-index: 1;
	position: absolute;
	bottom: 95%;
	// Align with tip-handle
	left: calc(100% - 10px - 0.5em);
	border-top: 10px solid transparent;
	border-left: 9px solid transparent;
	border-right: 9px solid transparent;
	@media screen and (max-width: $breakMobile) {
		display: none;
	}
}

// The bubble
.tip-handle:focus + [data-tip]:after,
.tip-handle:active + [data-tip]:after {
	display: block;
	content: attr(data-tip);
	position: absolute;
	width: 300px;
	// Align with center
	left: -150px;
	bottom: calc(95% + 10px);
	filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.54));
	border-radius: 4px;
	padding: 0.5em 1em;
	font-size: 0.9em;
	@media screen and (max-width: $breakMobile) {
		position: fixed;
		left: ($contentSpacing / 2);
		bottom: 20%;
		padding: 5vw;
		width: calc(90vw - #{$contentSpacing});
	}
}

.tip-handle {
	display: inline-block;
	margin-left: 0.5em;
	border: 1px solid transparent;
	border-radius: 2em;
	width: 1em;
	line-height: 1em;
	text-align: center;
	cursor: pointer;
}
.tip-handle:focus {
	outline: 0;
	position: relative;
}
.tip-handle:focus:after {
	content: "";
	display: block;
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	z-index: -1;
	border-radius: 2em;
}

@mixin my-color-scheme($vars) {
	// Root and content styles
	body,
	.tip-handle {
		background: map-get($vars, "textBackRoot");
		color: map-get($vars, "textColorRoot");
	}
	.post {
		color: map-get($vars, "textColorContent");
	}
	.post h2,
	.post .md-dictdef {
		color: map-get($vars, "textColorRoot");
	}

	// Muted styles and shades
	.tagline,
	.footer,
	.md-dicteg {
		color: map-get($vars, "textColorMuted");
	}
	.about-sm {
		@media screen and (max-width: $breakMobile) {
			background: map-get($vars, "textBackPanel");
		}
	}
	blockquote,
	.posts-label,
	.about-sm,
	.posts-row,
	.post-meta {
		border-color: map-get($vars, "lineShade");
		color: map-get($vars, "textColorMinor");
	}
	.post .md-box {
		outline-color: map-get($vars, "lineShade");
		box-shadow: 2px 2px 10px map-get($vars, "lineShade");
	}
	hr {
		background: map-get($vars, "lineShade");
	}
	pre.highlight,
	code.highlighter-rouge {
		background: map-get($vars, "textBackShade");
		color: map-get($vars, "textColorContent");
	}
	.post a > code {
		color: inherit;
	}
	// Button styles
	.dark-toggle {
		background: map-get($vars, "textBackButton");
		color: map-get($vars, "textColorButton");
	}
	.dark-toggle:hover,
	.dark-toggle:focus,
	.dark-toggle:active {
		background: map-get($vars, "textBackButtonActive");
		color: map-get($vars, "textColorButtonActive");
	}

	// Link styles
	a {
		color: map-get($vars, "linkColorRoot");
	}
	a:hover,
	.post a {
		color: map-get($vars, "linkColorContent");
		border-color: map-get($vars, "linkColorContent");
	}
	.post-tag {
		color: map-get($vars, "linkColorContent");
	}
	.post a:hover,
	.post-tag:hover
	.posts-row .post-link:hover h2,
	.social a:hover {
		background: map-get($vars, "linkColorShade");
		text-decoration-color: map-get($vars, "linkColorContent");
		outline-color: map-get($vars, "linkColorShade");
		border-color: map-get($vars, "linkColorContent");
	}
	.tip-handle {
		border-color: map-get($vars, "textColorMuted");
	}
	.tip-handle:focus,
	.tip-handle:active {
		border-color: map-get($vars, "linkColorContent");
	}
	.post a:hover {
		box-shadow: 0px 0px 0px 5px map-get($vars, "linkColorShade");
	}
	.tip-handle:focus:after,
	.tip-handle:active:after,
	.social a:hover {
		box-shadow: 0px 0px 0px 20px map-get($vars, "linkColorShade");
	}

	// Bubble styles
	.tip-handle:focus + [data-tip]:after,
	.tip-handle:active + [data-tip]:after {
		background: map-get($vars, "textBackBubble");
		color: map-get($vars, "textColorBubble");
	}
	.tip-handle:focus + [data-tip]:before,
	.tip-handle:active + [data-tip]:before {
		border-top-color: map-get($vars, "textBackBubble");
	}
	::selection {
		color: map-get($vars, "textColorSelected");
		background-color: map-get($vars, "textBackSelected");
	}
}

$lightModeVars: (
	"textBackRoot": #fff,
	"textBackPanel": #fff,
	"textColorRoot": #222,
	"textColorContent": #333,
	"textColorMinor": #555,
	"textColorMuted": #767676,

	"linkColorRoot": #000,
	"linkColorShade": hsla(210, 89%, 53%, 0.15),
	"linkColorContent": #085bb5,

	"textBackSelected": hsla(210, 89%, 53%, 0.15),
	"textColorSelected": #000,

	"lineShade": #eee,
	"textBackShade": #f4f4f4,

	"textBackButton": #f4f4f4,
	"textColorButton": #000,
	"textBackButtonActive": hsla(210, 89%, 53%, 0.15),
	"textColorButtonActive": #085bb5,

	"textBackBubble": rgba(0, 0, 0, 0.7),
	"textColorBubble": #fff
);

$darkModeVars: (
	"textBackRoot": #100e17,
	"textBackPanel": #000,
	"textColorRoot": #fff,
	"textColorContent": #c2c2c2,
	"textColorMinor": #c2c2c2,
	"textColorMuted": #7a7a8c,

	"linkColorRoot": #fff,
	"linkColorShade": hsla(210, 89%, 53%, 0.2),
	"linkColorContent": lighten(map-get($lightModeVars, "linkColorContent"), 30%),

	"textBackSelected": lighten(map-get($lightModeVars, "linkColorContent"), 30%),
	"textColorSelected": #fff,

	"lineShade": darken(#7a7a8c, 30%),
	"textBackShade": #201c29,

	"textBackButton": #201c29,
	"textColorButton": #fff,

	"textBackButtonActive": hsla(258, 19%, 25%, 0.9),
	"textColorButtonActive": #fff,

	"textBackBubble": hsla(258, 19%, 25%, 0.9),
	"textColorBubble": #fff
);

// Light (unscoped, as default)
@include my-color-scheme($lightModeVars);
.dark-off.dark-toggleable {
	.dark-toggle::before {
		content: '☼   Light';
	}
}
.social a:hover .icon {
	// Approximate $linkColorContent
	filter: contrast(0.2) sepia(2) saturate(4) hue-rotate(170deg);
}

// Dark (scoped to class=dark-on)
.dark-on {
	@include my-color-scheme($darkModeVars);
	.icon {
		filter: invert(1);
	}
	.social a:hover .icon {
		// Approximate $linkColorContent
		filter: contrast(0.1) sepia(2) saturate(4) hue-rotate(170deg);
	}
	pre.highlight {
		filter: brightness(1.4) contrast(1.5) saturate(0.5);
	}
	.dark-toggle::before {
		content: '☾   Dark';
	}
	.post img {
		filter: brightness(0.8) contrast(1.4) saturate(0.9);
	}
}
